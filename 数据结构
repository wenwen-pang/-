第五章
//arraList类.h
#ifndef ARRAYLIST_H
#define ARRAYLIST_H
#include<iostream>
template<class T>
class arrayList :public linearList<T>
{
public:
	//构造函数、复制构造函数和析构函数
	arrayList(int initialCapacity=10);
	arrayList(const arrayList<T>&);
	~arrayList() { delete[] element; }
	
	//ADT方法
	bool empty() const { return listSize == 0; }
	int size()const { retuen listSize; }
	T&get(int theIndex) const;
	int indexOf(const T& theElement)const;
	void erase(int theIndex);
	void insert(int theIndex, const T & theElement);
	void output(ostream& out) const;

	//其他方法
	int capacity() const { return arrayLength; }

protected:
	void checkIndex(int theIndex) const;
	//若索引theIndex无效，则抛出异常
	T* element;//存储线性元素的一维数组
	int arrayLength;//一维数组的容量
	int listSize;//线性表的元素个数
};
#endif

//linearList.h
#ifndef lINEARLIST_H
#define lINEARLIST_H
#include<iostream>
#include<ostream>
template<class T>
class linearList
{
public:
	virtual ~linearList() {};
	virtual bool empty()const = 0;
	//返回ture，当且仅当线性表为空。
	virtual int size()const = 0;
	//返回线性表的元素个数。
	virtual T& get(int theIndex)const = 0;
	//返回索引为theIndex的元素。
	virtual int indexOf(const T& theElement)const = 0;
	//返回元素theElement第一次出现时的索引
	virtual void erase(int theIndex) = 0;
	//删除索引为theIndex的元素。
	virtual void insert(int theIndex, const T& theElement) = 0;
	//把theElement插入线性表中索引为theIndex的位置上。
	virtual void output(ostream& out)const = 0;
	//把线性表插入输出流out
};
// TODO: 添加要在此处预编译的标头

#endif


//arrayList.cpp
#include "linearList.h"
#include "arrayList.h"
#include<iostream>
#include<sstream>
#include<string>
#include<vector>
#include<algorithm>
#include<iterator>
using namespace std;

template<class T>
arrayList<T>::arrayList(int initialCapacity)
{
	if (initialCapacity < 1)
	{
		ostringstream s;
		s << "Initial capacity = " << initialCapacity << "Must be > 0";
		throw illegalParameterValue(s.str());
	}
	arrayLength = initialCapacity;
	element = new T[arrayLength];
	listSize = 0;
}

template<class T>
arrayList<T>::arrayList(const arrayList<T>& theList)
{
	//复制构造函数
	arrayLength = theList.arrayLength;
	listSize = theList.listSize;
	element = new T[arrayLength];
	copy(theList.element, theList.element + listSize, element);
}

template<class T>
void arrayList<T>::checkIndex(int theIndex) const
{
	//确定索引theIndex再0和listSize - 1之间
	if (theIndex < 0 || theIndex >= listSize)
	{
		ostringstream s;
		s << "index = " << theIndex << "size = " << listSize;
		throw illegalTndex(s.str());
	}
}

template<class T>
T& arrayList<T>::get(int theIndex) const
{
	//返回索引为theIndex的元素
	//若此元素不存在，则抛出异常
	checkIndex(theIndex);
	return element[theIndex];
}

template<class T>
int arrayList<T>::indexOf(const T& theElement)const
{
	//返回元素theElement第一次出现时的索引
	//若元素不存在，则返回-1

	//查找元素theElement
	int theElement = (int)(find(element, element + listSize, theElement) - element);

	//确定元素theElement是否找得到
	if (theIndex == listSize)
		//没有找到
		return -1;
	else return theIndex;
}

template<class T>
void arrayList<T>::erase(int theIndex)
{
	//删除其索引为theIndex的元素
	//如果该元素不存在，则抛出异常illegalIndex
	checkIndex(theIndex);

	//有效索引，移动其索引大雨theIndex的元素
	copy(element + theIndex + 1, element_listSize, element + theIndex);
	element[== listSize].~T();//调用析构函数
}

template<class T>
void arrayList<T>::insert(int theIndex, const T& theElement)
{
	
		//在索引theIndex处插入元素theElement
		if (theIndex < 0 || theIndex > listSize)
		{
			//无效索引
			ostringstream s;
			s << "index = " << theIndex << "Size = " << listSize;
			throw illegalIndex(s.str());
		}

		//有效索引。确定数组是否已满
		if (listSize == arrayLength)
		{
			//数组空间已满，数组长度倍增
			changeLength1D(element, arrayLength, 2 * arrayLength);
			arrayLength *= 2;
		}
		//把元素享有移动一个位置
		copy_backward(element + theIndex, element + listSize, element + listSize + 1);

		element[theIndex] = theElement;
		listSize++;
}

template<class T>
void arrayList<T>::output(ostream & cout ) const
{
	//把线性表插入输出流
	copy(element, element + listSize, ostream_iterator<T>(cout, " "));

}

template<class T>

//重载<<
template <class T>
ostream& operator <<(ostream& out, const arrayList<T>& x)
{
	x.output(out);
	return out;
}


5.12~5.14
//vectorList.h
#ifndef vectorList_
#define vectorList_

#include<iostream>
#include<sstream>
#include<string>
#include<vector>
#include<algorithm>
#include<iterator>
#include "linearList.h"
#include "myExceptions.h"

using namespace std;

template<class T>
class vectorList : public linearList<T> 
{
   public:
      vectorList(int initialCapacity = 10);
      vectorList(const vectorList<T>&);
      ~vectorList() {delete element;}
      
      bool empty() const {return element->empty();}
      int size() const {return (int) element->size();}
      T& get(int theIndex) const;
      int indexOf(const T& theElement) const;
      void erase(int theIndex);
      void insert(int theIndex, const T& theElement);
      void output(ostream& out) const;

      int capacity() const {return (int) element->capacity();}
      
      typedef typename vector<T>::iterator iterator;
      iterator begin() {return element->begin();}
      iterator end() {return element->end();}

   protected: 
      void checkIndex(int theIndex) const;
      vector<T>* element;  
};

//vectorList.cpp
template<class T>
vectorList<T>::vectorList(int initialCapacity)
{
   if (initialCapacity < 1)
   {ostringstream s;
    s << "Initial capacity = " << initialCapacity << " Must be > 0";
    throw illegalParameterValue(s.str());
   }

   element = new vector<T>;
   element->reserve(initialCapacity);
}

template<class T>
vectorList<T>::vectorList(const vectorList<T>& theList)
{
   element = new vector<T>(*theList.element);
}

template<class T>
void vectorList<T>::checkIndex(int theIndex) const
{
   if (theIndex < 0 || theIndex >= size())
   {ostringstream s;
    s << "index = " << theIndex << " size = " << size();
    throw illegalIndex(s.str());
   }

}

template<class T>
T& vectorList<T>::get(int theIndex) const
{// Return element whose index is theIndex.
 // Throw illegalIndex exception if no such element.
   checkIndex(theIndex);
   return (*element)[theIndex];
}

template<class T>
int vectorList<T>::indexOf(const T& theElement) const
{
   int theIndex = (int) (find(element->begin(), element->end(),
                         theElement)
                         - element->begin());

 
   if (theIndex == size())
  
     return -1;
   else return theIndex;
 }

template<class T>
void vectorList<T>::erase(int theIndex)
{
   checkIndex(theIndex);
   element->erase(begin() + theIndex);
}

template<class T>
void vectorList<T>::insert(int theIndex, const T& theElement)
{
   if (theIndex < 0 || theIndex > size())
   {
      ostringstream s;
      s << "index = " << theIndex << " size = " << size();
      throw illegalIndex(s.str());
   }

   element->insert(element->begin() + theIndex, theElement);
}

template<class T>
void vectorList<T>::output(ostream& out) const
{
   copy(element->begin(), element->end(), ostream_iterator<T>(cout, "  "));
}


template <class T>
ostream& operator<<(ostream& out, const vectorList<T>& x)
   {x.output(out); return out;}

#endif

//main.cpp
#include<iostream>
#include<numeric>
#include<algorithm>   
#include<functional>  
#include "linearList.h"
#include "vectorList.h"

using namespace std;

int main()
{

   linearList<double> *x = new vectorList<double>(20);
   vectorList<int> y(2), z;

   cout << "Capacity of x, y and z = "
        << ((vectorList<double>*) x)->capacity() << ", "
        << y.capacity() << ", "
        << z.capacity() << endl;


   cout << "Initial size of x, y, and z = "
        << x->size() << ", "
        << y.size() << ", "
        << z.size() << endl;

   if (x->empty()) cout << "x is empty" << endl;
   else cout << "x is not empty" << endl;
   if (y.empty()) cout << "y is empty" << endl;
   else cout << "y is not empty" << endl;

   y.insert(0, 2);
   y.insert(1, 6);
   y.insert(0, 1);
   y.insert(2, 4);
   y.insert(3, 5);
   y.insert(2, 3);
   cout << "Inserted 6 integers, list y should be 1 2 3 4 5 6" << endl;
   cout << "Size of y = " << y.size() << endl;
   cout << "Capacity of y = " << y.capacity() << endl;
   if (y.empty()) cout << "y is empty" << endl;
   else cout << "y is not empty" << endl;
   y.output(cout);
   cout << endl << "Testing overloaded <<" << endl;
   cout << y << endl;

   int index = y.indexOf(4);
   if (index < 0) cout << "4 not found" << endl;
   else cout << "The index of 4 is " << index << endl;

   index = y.indexOf(7);
   if (index < 0) cout << "7 not found" << endl;
   else cout << "The index of 7 is " << index << endl;
   
   cout << "Element with index 0 is " << y.get(0) << endl;
   cout << "Element with index 3 is " << y.get(3) << endl;


   y.erase(1);
   cout << "Element 1 erased" << endl;
   cout << "The list is "  << y << endl;
   y.erase(2);
   cout << "Element 2 erased" << endl;
   cout << "The list is "  << y << endl;

   cout << "Size of y = " << y.size() << endl;
   cout << "Capacity of y = " << y.capacity() << endl;
   if (y.empty()) cout << "y is empty" << endl;
   else cout << "y is not empty" << endl;

   try {y.insert(-3, 0);}
   catch (illegalIndex e)
   {
      cout << "Illegal index exception" << endl;
      cout << "Insert index must be between 0 and list size" << endl;
      e.outputMessage();
   }

   vectorList<int> w(y);
   y.erase(0);
   y.erase(0);
   cout << "w should be old y, new y has first 2 elements removed" << endl;
   cout << "w is " << w << endl;
   cout << "y is " << y << endl;
   
   y.insert(0,4);
   y.insert(0,5);
   y.insert(0,6);
   y.insert(0,7);
   cout << "y is " << y << endl;

   cout << "Ouput using forward iterators pre and post ++" << endl;
   for (vectorList<int>::iterator i = y.begin();
        i != y.end(); i++)
      cout << *i << "  ";
   cout << endl;
   for (vectorList<int>::iterator i = y.begin();
        i != y.end(); ++i)
      cout << *i << "  ";
   cout << endl;

   cout << "Ouput using backward iterators pre and post --" << endl;
   for (vectorList<int>::iterator i = y.end();
        i != y.begin(); cout << *(--i) << "  ");
   cout << endl;
   for (vectorList<int>::iterator i = y.end();
        i != y.begin();)
      {i--; cout << *i << "  "; *i += 1;} 
   cout << endl;
   cout << "Incremented by 1 list is " << y << endl;

   reverse(y.begin(), y.end());
   cout << "The reversed list is " << y << endl;
   int sum = accumulate(y.begin(), y.end(), 0);
   cout << "The sum of the elements is " << sum << endl;
   sort(y.begin(), y.end());
   cout << "The sorted list is " << y << endl;
   sort(y.begin(), y.end(), greater<int>());
   cout << "The list is descending order is " << y << endl;
   return 0;
}








